# This workflow installs the latest version of Terraform CLI and authenticates to Azure using a Service Principal.
# It securely provides backend configuration for the Azure storage backend using GitHub secrets.
# On pull request events, this workflow will run `terraform init`, `terraform fmt`, and `terraform plan`.
# On push events to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
# Documentation for `azure/login` is here: https://github.com/Azure/login
#
# Setup steps:
# 1. Configure your Terraform backend in your code to use the azurerm backend (do not hard-code sensitive values).
# 2. Create an Azure Storage Account and Blob Container for state storage.
# 3. Create an Azure Service Principal with Contributor access to the resource group.
# 4. Add the following secrets to your GitHub repository:
#    - AZURE_CLIENT_ID
#    - AZURE_CLIENT_SECRET
#    - AZURE_SUBSCRIPTION_ID
#    - AZURE_TENANT_ID
#    - AZURE_RG (Resource Group for backend)
#    - AZURE_STORAGE (Storage Account for backend)
#    - AZURE_CONTAINER (Blob Container for backend)
#    - AZURE_KEY (Blob name for state file, e.g., terraform.tfstate)
#
name: 'Terraform'

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Authenticate to Azure using the Service Principal
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Create backend config file from secrets
    - name: Create backend config
      run: |
        echo "resource_group_name = \"${{ secrets.AZURE_RG }}\"" > backend.tfbackend
        echo "storage_account_name = \"${{ secrets.AZURE_STORAGE_ACCOUNT }}\"" >> backend.tfbackend
        echo "container_name = \"${{ secrets.AZURE_STORAGE_CONTAINER }}\"" >> backend.tfbackend
        echo "key = \"${{ secrets.AZURE_KEY }}\"" >> backend.tfbackend
        echo "access_key = \"${{ secrets.AZURE_ACCESS_KEY }}\"" >> backend.tfbackend
      working-directory: ./Terraform

    # Download tfvars from Azure Storage
    - name: Download tfvars from Azure Storage
      run: |
        az login --service-principal \
          --username ${{ secrets.AZURE_CLIENT_ID }} \
          --password ${{ secrets.AZURE_CLIENT_SECRET }} \
          --tenant ${{ secrets.AZURE_TENANT_ID }}
        az storage blob download \
          --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
          --container-name ${{ secrets.AZURE_STORAGE_CONTAINER }} \
          --name ${{ secrets.AZURE_TFVARS_BLOB }} \
          --file variables.auto.tfvars \
          --auth-mode login
      working-directory: ./Terraform

    # Initialize Terraform with backend config
    - name: Terraform Init
      run: terraform init -backend-config=backend.tfbackend
      working-directory: ./Terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./Terraform

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./Terraform

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./Terraform
